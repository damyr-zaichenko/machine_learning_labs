# -*- coding: utf-8 -*-
"""machine_learning_lab5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xfmJEEBYWNud7Y0aBwHCl4NZFndbXFje
"""

import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

df = pd.read_csv("dataset2_l4.txt")
print("{} записів, {} полів".format(*df.shape))
df.head()

df = df.drop(columns=["Class"])
print(f"Атрибути: {list(df.columns)}")

kmeans = KMeans(n_clusters=2, init='random', random_state=42, n_init=10)

kmeans.fit(df)

centroids = kmeans.cluster_centers_

print("Координати центрів кластерів:")
print(centroids)

wcss = []
for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, max_iter=300, n_init=10, random_state=88, init="random")
    kmeans.fit(df)
    wcss.append(kmeans.inertia_)

plt.plot(range(1, 11), wcss)
plt.title('Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

from sklearn.metrics import silhouette_score

silhouette_scores = []

range_n_clusters = range(2, 11)
for n_clusters in range_n_clusters:
    kmeans = KMeans(n_clusters=n_clusters, init='random', max_iter=300, n_init=10, random_state=1444)
    cluster_labels = kmeans.fit_predict(df)
    silhouette_avg = silhouette_score(df, cluster_labels)
    silhouette_scores.append(silhouette_avg)

plt.plot(range_n_clusters, silhouette_scores, marker='o')
plt.title('Average Silhouette Method')
plt.xlabel('Number of clusters')
plt.ylabel('Average Silhouette Score')
plt.show()

import numpy as np
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min
from sklearn.model_selection import train_test_split

def prediction_strength(X, k, test_size=0.2, random_state=1444):

    X_train, X_test = train_test_split(X, test_size=test_size, random_state=random_state)

    kmeans_train = KMeans(n_clusters=k, random_state=random_state, n_init=10, init='random')
    kmeans_train.fit(X_train)
    labels_train = kmeans_train.labels_

    test_labels_pred = kmeans_train.predict(X_test)

    kmeans_test = KMeans(n_clusters=k, random_state=random_state, n_init=10, init='random')
    kmeans_test.fit(X_test)
    labels_test = kmeans_test.labels_

    centroids_train = kmeans_train.cluster_centers_
    centroids_test = kmeans_test.cluster_centers_

    closest_clusters, _ = pairwise_distances_argmin_min(centroids_test, centroids_train)

    clusters_strengths = []

    n = len(labels_test)

    train_comembership = np.zeros((n, n), dtype=int)

    for i in range(n):
          for j in range(n):
              if labels_train[i] == labels_train[j]:
                  train_comembership[i, j] = 1


    for cluster_id in range(k):

        cluster_size = len(np.where(labels_test==cluster_id)[0])

        test_comembership = np.zeros((n, n), dtype=int)

        for i in range(n):
          for j in range(n):
              if labels_test[i] == labels_test[j] == cluster_id and i != j:
                  test_comembership[i, j] = 1

        sum = np.sum((train_comembership == 1) & (test_comembership == 1))

        clusters_strengths.append(sum/(cluster_size*(cluster_size-1)))

    return min(clusters_strengths)

from sklearn.datasets import make_blobs

X, y = make_blobs(n_samples=1000, centers=8, random_state=0, cluster_std=0.5)

from tqdm import tqdm

prediction_strengths = []

range_n_clusters = range(2, 11)
for n_clusters in tqdm(range_n_clusters):
    ps = prediction_strength(df, k=n_clusters, random_state=1444)
    prediction_strengths.append(ps)

plt.plot(range_n_clusters, prediction_strengths, marker='o')
plt.title('Prediction Strength Method')
plt.xlabel('Number of clusters')
plt.ylabel('Prediction Strength')
plt.show()

k = 2
best_silhouette_score = -1
best_kmeans = None

for i in tqdm(range(20)):
    kmeans = KMeans(n_clusters=k, init='k-means++', n_init=1)
    kmeans.fit(df)

    labels = kmeans.labels_
    silhouette_avg = silhouette_score(df, labels)

    if silhouette_avg > best_silhouette_score:
        best_silhouette_score = silhouette_avg
        best_kmeans = kmeans

print(f"Найкращий коефіцієнт силуету: {best_silhouette_score}")
print(f"Центроїди найкращих кластерів:\n{best_kmeans.cluster_centers_}")

import numpy as np
import matplotlib.pyplot as plt
from scipy.cluster.hierarchy import dendrogram, linkage
from sklearn.cluster import AgglomerativeClustering

k = 2

agg_clustering = AgglomerativeClustering(n_clusters=k)
labels = agg_clustering.fit_predict(df)

centroids = np.array([df[labels == i].mean(axis=0) for i in range(k)])

print(f"Центроїди кластерів:\n{centroids}")

linked = linkage(X, 'ward')

plt.figure(figsize=(10, 7))
dendrogram(linked, truncate_mode='level', p=5)
plt.title('Дендрограма')
plt.show()